# == Schema Information
#
# Table name: cursos
#
#  id         :integer          not null, primary key
#  nome       :string(255)
#  descricao  :text
#  situacao   :integer
#  created_at :datetime
#  updated_at :datetime
#

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CursosController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Curso. As you add validations to Curso, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    build(:curso).attributes.except("id", "created_at", "updated_at")
  }

  let(:invalid_attributes) {
    { nome: '', descricao: '', situacao: '' }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CursosController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all cursos as @cursos" do
      curso = Curso.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:cursos)).to eq([curso])
    end
  end

  describe "GET show" do
    it "assigns the requested curso as @curso" do
      curso = Curso.create! valid_attributes
      get :show, {:id => curso.to_param}, valid_session
      expect(assigns(:curso)).to eq(curso)
    end
  end

  describe "GET new" do
    it "assigns a new curso as @curso" do
      get :new, {}, valid_session
      expect(assigns(:curso)).to be_a_new(Curso)
    end
  end

  describe "GET edit" do
    it "assigns the requested curso as @curso" do
      curso = Curso.create! valid_attributes
      get :edit, {:id => curso.to_param}, valid_session
      expect(assigns(:curso)).to eq(curso)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Curso" do
        expect {
          post :create, {:curso => valid_attributes}, valid_session
        }.to change(Curso, :count).by(1)
      end

      it "assigns a newly created curso as @curso" do
        post :create, {:curso => valid_attributes}, valid_session
        expect(assigns(:curso)).to be_a(Curso)
        expect(assigns(:curso)).to be_persisted
      end

      it "redirects to the created curso" do
        post :create, {:curso => valid_attributes}, valid_session
        expect(response).to redirect_to(Curso.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved curso as @curso" do
        post :create, {:curso => invalid_attributes}, valid_session
        expect(assigns(:curso)).to be_a_new(Curso)
      end

      it "re-renders the 'new' template" do
        post :create, {:curso => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        {
          nome: Faker::Name.name,
          descricao: Faker::Lorem.paragraph,
          situacao: Faker::Number.number(5)
        }
      }

      it "updates the requested curso" do
        curso = Curso.create! valid_attributes
        put :update, {:id => curso.to_param, :curso => new_attributes}, valid_session
        old = curso.clone
        curso.reload
        expect(old.nome).not_to eq(curso.nome)
        expect(old.descricao).not_to eq(curso.descricao)
        expect(old.situacao).not_to eq(curso.situacao)
        expect(old.id).to eq(curso.id)
      end

      it "assigns the requested curso as @curso" do
        curso = Curso.create! valid_attributes
        put :update, {:id => curso.to_param, :curso => valid_attributes}, valid_session
        expect(assigns(:curso)).to eq(curso)
      end

      it "redirects to the curso" do
        curso = Curso.create! valid_attributes
        put :update, {:id => curso.to_param, :curso => valid_attributes}, valid_session
        expect(response).to redirect_to(curso)
      end
    end

    describe "with invalid params" do
      it "assigns the curso as @curso" do
        curso = Curso.create! valid_attributes
        put :update, {:id => curso.to_param, :curso => invalid_attributes}, valid_session
        expect(assigns(:curso)).to eq(curso)
      end

      it "re-renders the 'edit' template" do
        curso = Curso.create! valid_attributes
        put :update, {:id => curso.to_param, :curso => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested curso" do
      curso = Curso.create! valid_attributes
      expect {
        delete :destroy, {:id => curso.to_param}, valid_session
      }.to change(Curso, :count).by(-1)
    end

    it "redirects to the cursos list" do
      curso = Curso.create! valid_attributes
      delete :destroy, {:id => curso.to_param}, valid_session
      expect(response).to redirect_to(cursos_url)
    end
  end

end
